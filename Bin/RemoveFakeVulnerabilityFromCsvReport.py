"""
    Remove fake vulnerability from a csv report
"""
import os
import sys
from typing import Union

import pandas as pd


def get_df_from_file(path: str) -> Union[pd.DataFrame, None]:
    """
    Return a pandas dataframe from the content of a .csv/.xlsx/.xls/.ods file
    Arguments:
        path: Full path name of the input file
    Returns:
        None - If the input file doesn't exist or the file format is not the
         expected one
        Dataframe - if the input files was correctly read
    """
    if os.path.exists(path):
        try:
            if path.endswith('.csv'):
                return pd.read_csv(path)
            return pd.read_excel(path)
        except Exception as exc:
            print(exc)
            print(f'ERROR! Invalid file type: {path}')
    print(f"ERROR! File {path} doesn't exist!")
    return None


def remove_fake_vulnerability_id(source_df: pd.DataFrame,
                                 fake_df: pd.DataFrame) -> pd.DataFrame:
    """
    Remove from the 'source_df' df the fake vulnerability contained in 'fake_df'

    Parameters:
        source_df: vulnerability report df
        fake_df: fake vulnerability df
    Returns:
        Dataframe without fake CVE
    """
    clean_vid_record = ((source_df['VulnerabilityID'] == 'None') |
                        (source_df['VulnerabilityID'].str.contains('\\|')))

    return pd.merge(source_df.loc[~clean_vid_record],
                    fake_df,
                    on=['VulnerabilityID', 'Package Name'],
                    how="outer",
                    indicator=True).query('_merge=="left_only"').drop("_merge",
                                                                      axis=1)


# check number of arguments
# ------------------------------------
inputArgs = sys.argv
if len(sys.argv) != 4:
    print("""\
This script process a list of fake vulnerability and remove it from a \\
vulnerability report

Usage: theScript <fake vulnerability file> <vulnerability report file> \\
<target file>
""")
    sys.exit(1)

fake_vulnerability_df = get_df_from_file(os.path.normpath(inputArgs[1]))
if fake_vulnerability_df is None:
    print("ERROR! Impossible to load fake vulnerability definition file:",
          inputArgs[1])
    sys.exit(2)

vulnerability_df = get_df_from_file(os.path.normpath(inputArgs[2]))
if vulnerability_df is None:
    print("ERROR! Impossible to load vulnerability report file:", inputArgs[2])
    sys.exit(2)

# Remove the fake vulnerability from the vulnerability report
clean_vulnerability_df = remove_fake_vulnerability_id(vulnerability_df,
                                                      fake_vulnerability_df)

# Write the target file in .csv format
clean_vulnerability_df.to_csv(os.path.normpath(inputArgs[3]), index=False)
